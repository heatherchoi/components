// Typeset
// @param {list} $type-list A list of font-size and line-height
// @param {String|Number} $override-line-height
// @param {Boolean} $important Add important bang
@mixin typeset($type-list, $override-line-height: false, $important: false) {
  $actual-input-type: type-of($type-list);
  @if $actual-input-type != 'list' {
    @error 'Expected a list of font size and line-height, but got a '
      + '#{$actual-input-type}. Make sure you are passing a font map.';
  }
  // Grab list values for font-size and line-height
  $fs: nth($type-list, 1);
  $lh: nth($type-list, 2);

  //Computed Values for conversion
  $fs-computed: if(unit($fs) != 'px', $fs, rem($fs));
  $lh-computed: if($override-line-height, $override-line-height, $lh);

  // Unit-less line-height
  @if (unit($lh-computed) == 'px' and unit($fs) == 'px') {
    $lh-computed: decimal-floor(strip-unit($lh-computed/$fs), 2);
  }

  font-size: $fs-computed iff($important, !important);
  line-height: $lh-computed iff($important, !important);
}


// @param {Map} $font-map A map of font size and responsive settings
// @param {String||False} $override-line-height
// @param {Boolean} $important Add important bang
@mixin typography-responsive($font-map) {
  // Ensure that $font-map is actually a map
  $actual-input-type: type-of($font-map);
  @if $actual-input-type != 'map' {
    @error 'Expected a map of breakpoints and font settings, but got a '
      + '#{$actual-input-type}. Make sure you are passing a font map.';
  }

  @each $breakpoint, $breakpoint-map in $font-map {
    @if $breakpoint == null {
      @include typeset($breakpoint-map);
    } @else if $breakpoint == 'print' {
      @media print {
        @include typeset($breakpoint-map);
      }
    } @else {
      @include type-map-to-breakpoint($breakpoint) {
        @include typeset($breakpoint-map);
      }
    }
  }
}

// Set Font Family
// Sets the font family and associated properties, such as font smoothing. Also
// overrides the font for print.
// @param {string} $font-family font-family and fallbacks
// @param {string} $font-family-print  font-family and fallbacks for print
@mixin set-font-family(
  $font-family: $font-family-primary,
  $font-family-print: $font-family
) {
  font-family: $font-family;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  @if ($font-family-print != false) {
    @media print {
      font-family: $font-family-primary;
    }
  }
}

// Set Font Colors
// @param {HEX} $font-color-screen Set font color for screen media
// @param {HEX} $font-color-print Set font color for print media
@mixin set-font-color(
  $font-color-screen: $color-text-primary,
  $font-color-print: $color-text-print
) {
  color: $color-text-primary;
  @if ($font-color-print != false) {
    @media print {
      color: $color-text-print;
    }
  }
}

// Font Family Mixins
@mixin display-font-family-primary {
  @include set-font-family;
}

@mixin display-font-family-secondary {
  @include set-font-family($font-family-secondary);
}

// Todo Find and replace
@mixin display-font-family-system {
  @include set-font-family($font-family-system);
}

// Base Font Settings
@mixin display-font-primary-regular {
  @include display-font-family-primary;
  font-weight: 400;
}

@mixin display-font-primary-bold {
  @include display-font-family-primary;
  font-weight: 700;
}

// Alternate Font Settings
@mixin display-font-secondary-normal {
  @include display-font-family-secondary;
  font-weight: 400;
}

@mixin display-font-secondary-semi {
  @include display-font-family-secondary;
  font-weight: 500;
}

@mixin display-font-secondary-bold {
  @include display-font-family-secondary;
  font-weight: 700;
}

// Font Treatments
@mixin display-headline1 {
  @include display-font-secondary-bold;
  @include typography-responsive($font-responsive-headline-1);
}

@mixin display-headline2 {
  @include display-font-secondary-bold;
  @include typography-responsive($font-responsive-headline-2);
}

@mixin display-headline3 {
  @include display-font-secondary-bold;
  @include typography-responsive($font-responsive-headline-3);
}

@mixin display-headline4 {
  @include display-font-secondary-bold;
  @include typography-responsive($font-responsive-headline-4);
}

@mixin display-headline5 {
  @include display-font-secondary-bold;
  @include typography-responsive($font-responsive-headline-5);
}

@mixin display-headline6 {
  @include display-font-secondary-bold;
  @include typography-responsive($font-responsive-headline-6);
}

@mixin display-body-text {
  @include display-font-primary-regular;
  @include typography-responsive($font-responsive-body);
}

@mixin display-body-text-small {
  @include display-font-secondary-normal;
  @include typography-responsive($font-responsive-body-small);
}

@mixin display-body-text-large {
  @include display-font-primary-regular;
  @include typography-responsive($font-responsive-body-large);
}

@mixin display-button-text {
  @include display-font-secondary-normal;
  @include typography-responsive($font-responsive-body);
}

@mixin display-button-text-small {
  @include display-font-secondary-normal;
  @include typography-responsive($font-responsive-body-small);
}

@mixin display-button-text-large {
  @include display-font-secondary-normal;
  @include typography-responsive($font-responsive-body-large);
}
